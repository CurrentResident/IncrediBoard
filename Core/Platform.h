#ifndef PLATFORM_GENERIC_H_
#define PLATFORM_GENERIC_H_

#include <boost/mpl/assert.hpp>
#include <boost/mpl/comparison.hpp>
#include <boost/mpl/int.hpp>

#include <stdint.h>

namespace Platform
{
    // TODO: Find some clever high-level fusion/MPL way of defining the columns and rows such that we don't
    //       need to hardcode the max number of rows here, but rather have it generated by the compiler just
    //       based on an arbitrary number of column definitions...  even if it means splitting out the input
    //       stuff away from Platform.

    struct InputValuesType
    {
        uint8_t row[6];
    };

    void ReadInputs(InputValuesType& o_inputs);

    unsigned long GetMsec();

    // The following templates need to be specialized for your platform!
    template<int c>
    void SetRow ()
    {
        using namespace boost::mpl;

        BOOST_MPL_ASSERT_MSG ((equal_to<int_<c>, int_<-1> >::value ),
                              YOU_MUST_SPECIALIZE_SetRow_FOR_THIS_ROW__SEE_c_PARAMETER,
                              (void));
    };

    template<int c>
    void ClearRow ()
    {
        using namespace boost::mpl;

        BOOST_MPL_ASSERT_MSG ((equal_to<int_<c>, int_<-1> >::value ),
                              YOU_MUST_SPECIALIZE_ClearRow_FOR_THIS_ROW__SEE_c_PARAMETER,
                              (void));
    };
}

#endif
